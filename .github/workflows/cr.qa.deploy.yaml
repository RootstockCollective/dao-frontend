name: Deploy to Amazon ECS (CR QA)
# Deploys to: https://qa.cr.rootstockcollective.xyz
# Triggers when a branch is merged into develop
# Uses the `.env.cr.qa` env file

on:
  workflow_dispatch: # Manually triggered from GitHub Actions tab
  pull_request:
    types: [labeled] # Triggered by a label in a PR

# Declare default permissions as read only.
permissions: read-all

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: rscoll-dev-bim-qa
  ECS_SERVICE: rscoll-dev-bim-qa
  ECS_CLUSTER: rscoll-dev
  ECS_TASK_DEFINITION: rscoll-dev-bim-qa
  CONTAINER_NAME: rscoll-dev-bim-qa

  # The .env file that is used to build the docker image 
  # is retrieved using PROFILE, so be sure there is a `.env.<PROFILE>` file
  # that matches with the profile set
  # Example: PROFILE=testnet => .env.testnet
  PROFILE: cr.qa

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || github.event.label.name == 'deploy to CR QA'
    environment:
      name: CR-QA
      url: https://qa.cr.rootstockcollective.xyz

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 #v4.1.0
        with:
          role-to-assume: ${{ secrets.AWS_LOGIN_QA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 #v2.0.1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg PROFILE="$PROFILE" --build-arg NEXT_PUBLIC_BUILD_ID=${{ github.sha }} --build-arg THE_GRAPH_API_KEY=${{ secrets.THE_GRAPH_API_KEY }} --no-cache .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        run: aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@e89b6874818d80bb892e7010a5013519bde9d9a6 #v1.7.2
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@538b32884c2bf327057c6805f0315e5ee92102cc #v2.3.2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  trigger-e2e-tests:
    name: Trigger E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Trigger E2E Tests in Target Repo
        id: trigger
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DAO_DAPP_AUTOMATION_PAT }}
          script: |
            const workflowDispatchResponse = await github.request('POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches', {
              owner: 'rsksmart',
              repo: 'Deprecated_DAO-dApp-automation',
              workflow_id: 'playwright.yml',
              ref: 'main',
              inputs: {
                ENVIRONMENT: 'CR-QA',
                TEST_TYPE: 'smoke'
              }
            });

            const now = new Date().toISOString();
            core.setOutput("trigger_time", now);

      - name: Wait for workflow to be registered
        run: sleep 15

      - name: Get Workflow Run ID
        id: get_run
        run: |
          echo "Looking for matching workflow run..."
          TRIGGER_TIME="${{ steps.trigger.outputs.trigger_time }}"

          RUN_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.DAO_DAPP_AUTOMATION_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/rsksmart/Deprecated_DAO-dApp-automation/actions/workflows/playwright.yml/runs?event=workflow_dispatch&branch=main&per_page=5")

          RUN_ID=$(echo "$RUN_INFO" | jq -r --arg TIME "$TRIGGER_TIME" '
            .workflow_runs
            | map(select(.created_at > $TIME))
            | sort_by(.created_at)
            | last
            | .id')

          if [ "$RUN_ID" = "null" ] || [ -z "$RUN_ID" ]; then
            echo "❌ Could not find the triggered workflow run."
            exit 1
          fi

          echo "Found workflow run ID: $RUN_ID"
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      - name: Poll workflow status
        run: |
          RUN_ID=${{ steps.get_run.outputs.run_id }}

          echo "Polling run ID: $RUN_ID"
          STATUS=""
          CONCLUSION=""

          until [ "$STATUS" = "completed" ]; do
            sleep 15

            RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.DAO_DAPP_AUTOMATION_PAT }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/rsksmart/Deprecated_DAO-dApp-automation/actions/runs/$RUN_ID")

            STATUS=$(echo "$RESPONSE" | jq -r '.status')
            CONCLUSION=$(echo "$RESPONSE" | jq -r '.conclusion')
            echo "Status: $STATUS, Conclusion: $CONCLUSION"
          done

          if [ "$CONCLUSION" != "success" ]; then
            echo "❌ E2E tests failed."
            exit 1
          else
            echo "✅ E2E tests passed!"
          fi

