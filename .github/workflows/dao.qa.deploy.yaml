name: Deploy to Amazon ECS (DAO QA)
# Deploys to: https://qa.dao.rootstockcollective.xyz/
# Triggers when a release is created
# Uses the `.env.testnet` env file
# NOTE: Will be deprecated soon and replaced with the release candidate workflow.

on:
  workflow_dispatch: # Manually triggered from GitHub Actions tab
  pull_request:
    types: [labeled] # Triggered by a label in a PR

# Declare default permissions as read only.
permissions: read-all

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: rscoll-dev-dao-qa
  ECS_CLUSTER: rscoll-dev
  ECS_SERVICE: rscoll-dev-dao-qa
  ECS_TASK_DEFINITION: rscoll-dev-dao-qa
  CONTAINER_NAME: rscoll-dev-dao-qa

  # The .env file that is used to build the docker image
  # is retrieved using PROFILE, so be sure there is a `.env.<PROFILE>` file
  # that matches with the profile set
  # Example: PROFILE=testnet => .env.testnet
  PROFILE: dao.qa

jobs:
  cache-dependencies:
    name: Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=$(sha256sum package-lock.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Restore node_modules cache
        id: restore-node
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-${{ steps.cache-key.outputs.value }}
          restore-keys: |
            node-

      - name: Install dependencies
        if: steps.restore-node.outputs.cache-hit != 'true'
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-${{ steps.cache-key.outputs.value }}

  cache-build:
    name: Cache Build
    runs-on: ubuntu-latest
    needs: cache-dependencies
    outputs:
      build-cache-key: ${{ steps.build-cache-key.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-${{ needs.cache-dependencies.outputs.cache-key }}

      - name: Generate build cache key
        id: build-cache-key
        run: |
          echo "value=$(sha256sum package-lock.json src/**/*.{ts,tsx,js,jsx} | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Restore .next cache
        id: restore-next
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: next-${{ steps.build-cache-key.outputs.value }}
          restore-keys: |
            next-

      - name: Build application
        env:
          NEXT_TELEMETRY_DISABLED: 1
        run: npm run build

      - name: Cache .next
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: next-${{ steps.build-cache-key.outputs.value }}
  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [cache-dependencies, cache-build]
    if: |
      github.event_name == 'workflow_dispatch' || github.event.label.name == 'deploy to DAO QA'

    environment:
      name: DAO-QA
      url: https://qa.dao.rootstockcollective.xyz

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "node-key=node-$(sha256sum package-lock.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "next-key=next-$(sha256sum package-lock.json src/**/*.{ts,tsx,js,jsx} | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ steps.cache-keys.outputs.node-key }}
          restore-keys: |
            node-

      - name: Restore .next cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ steps.cache-keys.outputs.next-key }}
          restore-keys: |
            next-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a #v4.3.1
        with:
          role-to-assume: ${{ secrets.AWS_LOGIN_QA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 #v2.0.1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg PROFILE="$PROFILE" --build-arg NEXT_PUBLIC_BUILD_ID=${{ github.sha }} --build-arg THE_GRAPH_API_KEY=${{ secrets.THE_GRAPH_API_KEY }} --build-arg DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }} --build-arg CI=1 --build-arg DAO_GRAPH_API_KEY=${{ secrets.DAO_GRAPH_API_KEY }} --no-cache .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        run: aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@64aefa8f68c9083d24d230e3099d046d5964bcba #v1.7.5
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@4b08990e8909cf36bc2ca95f994312f090c41865 #v2.3.4
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
